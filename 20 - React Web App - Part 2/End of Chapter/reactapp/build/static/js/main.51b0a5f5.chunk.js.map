{"version":3,"sources":["data/types.ts","data/entities.ts","data/dataStore.ts","data/reducer.ts","data/httpHandler.ts","data/actionCreators.ts","header.tsx","productItem.tsx","categoryList.tsx","productList.tsx","data/productListConnector.ts","orderDetails.tsx","summary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTIONS","OrderLine","product","quantity","this","price","Order","initialLines","lines","Map","forEach","ol","set","id","prod","has","removeProduct","get","delete","values","reduce","total","dataStore","createStore","data","action","products","order","type","ADD_PRODUCTS","payload","MODIFY_ORDER","addProduct","RESET_ORDER","urls","HttpHandler","callback","Axios","then","response","orderData","orderLines","map","productId","productName","name","post","Header","count","props","productCount","className","toFixed","to","Component","ProductItem","useState","setQuantity","description","onClick","onChange","ev","Number","target","value","CategoryList","categories","c","btnClass","selected","selectCategory","ProductList","cat","setState","selectedCategory","state","p","addToOrder","filter","category","mapDispatchToProps","ConnectedProductList","connect","Set","connectFunction","OrderDetails","line","colSpan","submitCallback","Summary","match","params","App","httpHandler","componentDidMount","loadProducts","dispatch","render","store","path","component","routeProps","storeOrder","getState","history","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51b0a5f5.chunk.js","sourcesContent":["import { Product, Order } from \"./entities\";\r\nimport { Action } from \"redux\";\r\n\r\nexport interface StoreData {\r\n    products: Product[],\r\n    order: Order\r\n}\r\n\r\nexport enum ACTIONS {\r\n    ADD_PRODUCTS, MODIFY_ORDER, RESET_ORDER\r\n}\r\n\r\nexport interface AddProductsAction extends Action<ACTIONS.ADD_PRODUCTS> { \r\n    payload: Product[]\r\n}\r\n\r\nexport interface ModifyOrderAction extends Action<ACTIONS.MODIFY_ORDER> {\r\n    payload: {\r\n        product: Product, \r\n        quantity: number\r\n    }\r\n}\r\n\r\nexport interface ResetOrderAction extends Action<ACTIONS.RESET_ORDER> {}\r\n\r\nexport type StoreAction = AddProductsAction | ModifyOrderAction | ResetOrderAction;\r\n","export type Product = {\r\n    id: number, \r\n    name: string,\r\n    description: string,\r\n    category: string, \r\n    price: number \r\n};\r\n\r\nexport class OrderLine {\r\n    constructor(public product: Product, public quantity: number) {\r\n        // no statements required\r\n    }\r\n\r\n    get total(): number {\r\n        return this.product.price * this.quantity;\r\n    }\r\n}\r\n\r\nexport class Order {\r\n    private lines = new Map<number, OrderLine>();\r\n\r\n    constructor(initialLines?: OrderLine[]) {\r\n        if (initialLines) {\r\n            initialLines.forEach(ol => this.lines.set(ol.product.id, ol));\r\n        }\r\n    }\r\n\r\n    public addProduct(prod: Product, quantity: number) {\r\n        if (this.lines.has(prod.id)) {\r\n            if (quantity === 0) {\r\n                this.removeProduct(prod.id);\r\n            } else {\r\n                this.lines.get(prod.id)!.quantity += quantity;\r\n            }\r\n        } else {\r\n            this.lines.set(prod.id, new OrderLine(prod, quantity));\r\n        }\r\n    }\r\n\r\n    public removeProduct(id: number) {\r\n        this.lines.delete(id);\r\n    }\r\n\r\n    get orderLines(): OrderLine[] {\r\n        return [...this.lines.values()];\r\n    }\r\n\r\n    get productCount(): number {\r\n        return [...this.lines.values()]\r\n            .reduce((total, ol) => total += ol.quantity, 0);\r\n    }\r\n\r\n    get total(): number {\r\n        return [...this.lines.values()].reduce((total, ol) => total += ol.total, 0);\r\n    }\r\n}\r\n","import { createStore, Store } from \"redux\";\r\nimport { StoreReducer } from \"./reducer\";\r\nimport { StoreData, StoreAction } from \"./types\";\r\n\r\nexport const dataStore: Store<StoreData, StoreAction> = createStore(StoreReducer);\r\n","import { ACTIONS, StoreData, StoreAction } from \"./types\";\r\nimport { Order } from \"./entities\";\r\nimport { Reducer } from \"redux\";\r\n\r\nexport const StoreReducer: Reducer<StoreData, StoreAction> \r\n        = (data: StoreData | undefined , action)  => {\r\n\r\n    data = data || { products: [], order: new Order() }\r\n    switch(action.type) {\r\n        case ACTIONS.ADD_PRODUCTS:\r\n            return {\r\n                ...data,\r\n                products: [...data.products, ...action.payload]\r\n            };\r\n\r\n        case ACTIONS.MODIFY_ORDER:\r\n            data.order.addProduct(action.payload.product, action.payload.quantity);\r\n            return { ...data };\r\n\r\n        case ACTIONS.RESET_ORDER: \r\n            return {\r\n                ...data, \r\n                order: new Order()\r\n            }\r\n        default:\r\n            return data;\r\n    }\r\n}\r\n","import Axios from \"axios\";\r\nimport { Product, Order}  from \"./entities\";\r\n\r\n// const protocol = document.location.protocol;\r\n// const hostname = document.location.hostname;\r\n// const port = 4600;\r\n\r\nconst urls = {\r\n    // products: `${protocol}//${hostname}:${port}/products`,\r\n    // orders: `${protocol}//${hostname}:${port}/orders`\r\n    products: \"/api/products\",\r\n    orders: \"/api/orders\"\r\n};\r\n\r\nexport class HttpHandler {\r\n\r\n    loadProducts(callback: (products: Product[]) => void): void {\r\n        Axios.get(urls.products).then(response => callback(response.data))\r\n    }\r\n\r\n    storeOrder(order: Order, callback: (id: number) => void): void {\r\n        let orderData = {\r\n            lines: [...order.orderLines.values()].map(ol => ({\r\n                productId: ol.product.id,\r\n                productName: ol.product.name, \r\n                quantity: ol.quantity\r\n            }))\r\n        }\r\n        Axios.post(urls.orders, orderData)\r\n            .then(response => callback(response.data.id));\r\n    }\r\n}","import { ACTIONS, AddProductsAction, ModifyOrderAction, ResetOrderAction } \r\n    from \"./types\";\r\nimport { Product } from \"./entities\";\r\n\r\nexport const addProduct = (...products: Product[]): AddProductsAction => ({\r\n    type: ACTIONS.ADD_PRODUCTS,\r\n    payload: products\r\n});\r\n\r\nexport const modifyOrder = \r\n    (product: Product, quantity: number): ModifyOrderAction => ({\r\n        type: ACTIONS.MODIFY_ORDER,\r\n        payload: { product, quantity}\r\n    });\r\n\r\nexport const resetOrder = (): ResetOrderAction => ({\r\n    type: ACTIONS.RESET_ORDER\r\n});\r\n","import React, { Component } from \"react\";\r\nimport { Order } from \"./data/entities\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    order: Order\r\n}\r\n\r\nexport class Header extends Component<Props> {\r\n\r\n    render() {\r\n        let count = this.props.order.productCount;\r\n        return <div className=\"p-1 bg-secondary text-white text-right\">\r\n            { count === 0 ? \"(No Selection)\" \r\n                : `${ count } product(s), $${ this.props.order.total.toFixed(2)}` }\r\n            <NavLink to=\"/order\" className=\"btn btn-sm btn-primary m-1\">\r\n                Submit Order\r\n            </NavLink>\r\n        </div>\r\n    }\r\n}\r\n","import React, { FunctionComponent, useState } from \"react\";\r\nimport { Product } from \"./data/entities\";\r\n\r\ninterface Props {\r\n    product: Product,\r\n    callback: (product: Product, quantity: number) => void\r\n}\r\n\r\n// interface State {\r\n//     quantity: number\r\n// }\r\n\r\nexport const ProductItem: FunctionComponent<Props> = (props) => {\r\n\r\n    const [quantity, setQuantity] = useState<number>(1);\r\n\r\n    return <div className=\"card m-1 p-1 bg-light\">\r\n        <h4>\r\n            { props.product.name }\r\n            <span className=\"badge badge-pill badge-primary float-right\">\r\n                ${ props.product.price.toFixed(2) }\r\n            </span>\r\n        </h4>\r\n        <div className=\"card-text bg-white p-1\">\r\n            { props.product.description }\r\n            <button className=\"btn btn-success btn-sm float-right\"\r\n                    onClick={ () => props.callback(props.product, quantity) }>\r\n                Add To Cart\r\n            </button>\r\n            <select className=\"form-control-inline float-right m-1\" \r\n                    onChange={ (ev) => setQuantity(Number(ev.target.value)) }>\r\n                <option>1</option>\r\n                <option>2</option>\r\n                <option>3</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\ninterface Props {\r\n    selected: string,\r\n    categories: string[],\r\n    selectCategory: (category: string) => void;\r\n}\r\n\r\nexport class CategoryList extends Component<Props> {\r\n\r\n    render() {\r\n        return <div>\r\n            { [\"All\", ...this.props.categories].map(c => {\r\n                let btnClass = this.props.selected === c \r\n                    ? \"btn-primary\": \"btn-secondary\";\r\n                return <button key={ c }\r\n                        className={ `btn btn-block ${btnClass}` } \r\n                        onClick={ () => this.props.selectCategory(c) }>\r\n                    { c }\r\n                </button>\r\n            }) }\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Header } from \"./header\";\r\nimport { ProductItem } from \"./productItem\";\r\nimport { CategoryList} from \"./categoryList\";\r\nimport { Product, Order } from \"./data/entities\";\r\n\r\ninterface Props {\r\n    products: Product[],\r\n    categories: string[],\r\n    order: Order,\r\n    addToOrder: (product: Product, quantity: number) => void\r\n}\r\n\r\ninterface State {\r\n    selectedCategory: string;\r\n}\r\n\r\nexport class ProductList extends Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedCategory: \"All\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Header order={ this.props.order } />\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-3 p-2\">\r\n                        <CategoryList categories={ this.props.categories } \r\n                            selected={ this.state.selectedCategory }\r\n                            selectCategory={ this.selectCategory } />\r\n                    </div>\r\n                    <div className=\"col-9 p-2\">\r\n                        {\r\n                            this.products.map(p => \r\n                                <ProductItem key={ p.id } product={ p } \r\n                                    callback={ this.props.addToOrder } />)\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    get products(): Product[] {\r\n        return this.props.products.filter(p => this.state.selectedCategory === \"All\" \r\n            || p.category === this.state.selectedCategory);\r\n    }\r\n\r\n    selectCategory = (cat: string) => {\r\n        this.setState({ selectedCategory: cat});\r\n    }\r\n}\r\n","import { StoreData } from \"./types\";\r\nimport { modifyOrder } from \"./actionCreators\";\r\nimport { connect } from \"react-redux\";\r\nimport { ProductList } from \"../productList\";\r\n\r\nconst mapStateToProps = (data: StoreData) => ({\r\n    products: data.products,\r\n    categories: [...new Set(data.products.map(p => p.category))],\r\n    order: data.order\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    addToOrder: modifyOrder\r\n}\r\n\r\nconst connectFunction = connect(mapStateToProps, mapDispatchToProps);\r\nexport const ConnectedProductList = connectFunction(ProductList);\r\n","import React, { Component } from \"react\";\r\nimport { StoreData } from \"./data/types\";\r\nimport { Order } from \"./data/entities\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (data: StoreData) => ({\r\n    order: data.order\r\n})\r\n\r\ninterface Props {\r\n    order: Order,\r\n    submitCallback: () => void    \r\n}\r\n\r\nconst connectFunction = connect(mapStateToProps);\r\nexport const OrderDetails = connectFunction(\r\n    class extends Component<Props> {\r\n        render() {\r\n            return <div>\r\n            <h3 className=\"text-center bg-primary text-white p-2\">Order Summary</h3>\r\n            <div className=\"p-3\">\r\n                <table className=\"table table-sm table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Quantity</th><th>Product</th>\r\n                            <th className=\"text-right\">Price</th>\r\n                            <th className=\"text-right\">Subtotal</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        { this.props.order.orderLines.map(line =>\r\n                            <tr key={ line.product.id }>\r\n                                <td>{ line.quantity }</td>\r\n                                <td>{ line.product.name }</td>\r\n                                <td className=\"text-right\">\r\n                                    ${ line.product.price.toFixed(2) }\r\n                                </td>\r\n                                <td className=\"text-right\">\r\n                                    ${ line.total.toFixed(2) }\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <th className=\"text-right\" colSpan={3}>Total:</th>\r\n                            <th className=\"text-right\">\r\n                                ${ this.props.order.total.toFixed(2) }\r\n                            </th>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n            <div className=\"text-center\">\r\n                <NavLink to=\"/products\" className=\"btn btn-secondary m-1\">\r\n                    Back\r\n                </NavLink>\r\n                <button className=\"btn btn-primary m-1\" \r\n                        onClick={ this.props.submitCallback }>\r\n                    Submit Order\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }});\r\n","import React, { Component } from \"react\";\r\nimport { match } from \"react-router\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface Params {\r\n    id: string;\r\n}\r\n\r\ninterface Props {\r\n    match: match<Params>\r\n}\r\n\r\nexport class Summary extends Component<Props> {\r\n    render() {\r\n        let id = this.props.match.params.id;\r\n        return <div className=\"m-2 text-center\">\r\n            <h2>Thanks!</h2>\r\n            <p>Thanks for placing your order.</p>\r\n            <p>Your order is #{ id }</p>\r\n            <p>We'll ship your goods as soon as possible.</p>\r\n            <NavLink to=\"/products\" className=\"btn btn-primary\">OK</NavLink>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { dataStore } from \"./data/dataStore\";\nimport { Provider } from 'react-redux';\nimport { HttpHandler } from \"./data/httpHandler\";\nimport { addProduct } from './data/actionCreators';\nimport { ConnectedProductList } from './data/productListConnector';\nimport { Switch, Route, Redirect, BrowserRouter, RouteComponentProps } \n    from \"react-router-dom\";\nimport { OrderDetails } from './orderDetails';\nimport { Summary } from './summary';\n\ninterface Props {\n    // no props required\n}\n\nexport default class App extends Component<Props> {\n    private httpHandler = new HttpHandler();\n\n    componentDidMount = () => this.httpHandler\n        .loadProducts(data => {dataStore.dispatch(addProduct(...data))});\n\n    render = () => \n      <div className=\"App\">\n        <Provider store={ dataStore }>\n          <BrowserRouter>\n            <Switch>\n                <Route path=\"/products\" component={ ConnectedProductList } />\n                <Route path=\"/order\" render={ (props) => \n                  <OrderDetails { ...props } submitCallback={ () =>\n                      this.submitCallback(props) } />\n                } />\n                <Route path=\"/summary/:id\" component={ Summary } />\n                <Redirect to=\"/products\" />\n            </Switch>\n          </BrowserRouter>\n        </Provider>\n      </div>\n\n    submitCallback = (routeProps: RouteComponentProps) => {\n      this.httpHandler.storeOrder(dataStore.getState().order, \n        id => routeProps.history.push( `/summary/${id}`));\n    }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}